import { ethers } from "hardhat";

describe("Sender and Receiver", function () {
    const chainSelector = "16015286601757825753";
    it("receive gas and adjust gas limit", async function () {
        const [owner] = await ethers.getSigners();
        const Router = await ethers.getContractFactory("MockCCIPRouter");
        const Sender = await ethers.getContractFactory("Sender");
        const TransferUSDC = await ethers.getContractFactory("TransferUSDC");
        const Receiver = await ethers.getContractFactory("Receiver");
        const BurnMintERC677 = await ethers.getContractFactory("BurnMintERC677");

        const router = await Router.deploy();
        const usdc = await BurnMintERC677.deploy(
            "USDC Token",
            "USDC",
            18,
            BigInt(1e27)
        );
        const link = await BurnMintERC677.deploy(
            "ChainLink Token",
            "LINK",
            18,
            BigInt(1e27)
        );
        const sender = await Sender.deploy(router, link);
        const receiver = await Receiver.deploy(router);
        const transferUSDC = await TransferUSDC.deploy(router, usdc, link);

        // set allowlists for chains and sender addresses
        await sender.allowlistDestinationChain(chainSelector, true);
        await receiver.allowlistSourceChain(chainSelector, true);
        await receiver.allowlistSender(sender, true);
        await transferUSDC.allowlistDestinationChain(16015286601757825753, true);
        const gasUsageReport = []; 
        //test link 
        await sender.sendMessagePayLINK(chainSelector, transferUSDC, 5, 400000);

        // initial gas limit => send message
        await transferUSDC.transferUsdc(16015286601757825753, receiver, 1000000, 500000);

        // find gas used from the last message executed
        const mockRouterEvents = await router.queryFilter(
            router.filters.MsgExecuted
        );
        const mockRouterEvent = mockRouterEvents[mockRouterEvents.length - 1]; // check last event
        const gasUsed = mockRouterEvent.args.gasUsed;

        // set new gas limit (increasing 10%)
        const newGasLimit = Math.ceil(Number(gasUsed) * 1.1);

        gasUsageReport.push({
            gasUsed: gasUsed.toString(),
            newGasLimit
        });

        // new gas limit => send message
        await transferUSDC.transferUsdc(16015286601757825753, receiver, 1000000, newGasLimit);


        // report gas used
        gasUsageReport.forEach((report) => {
            console.log(
                "Gas: %d - new gas limit: %d",
                report.gasUsed,
                report.newGasLimit
            );
        });
    });
});
